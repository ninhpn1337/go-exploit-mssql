package main

import (
	"database/sql"
	"flag"
	"fmt"
	"log"

	_ "github.com/denisenkom/go-mssqldb"
)

func main() {
	// Define command-line flags
	username := flag.String("username", "", "SQL Server username")
	password := flag.String("password", "", "SQL Server password")
	ip := flag.String("ip", "127.0.0.1", "SQL Server IP address")
	port := flag.String("port", "1433", "SQL Server port")
	db := flag.String("db", "", "SQL Server database name")
	osCommand := flag.String("command", "dir", "OS command to execute")

	// Parse command-line flags
	flag.Parse()

	// Validate flags
	if *username == "" || *password == "" || *db == "" {
		log.Fatal("Username, password, and database name must be provided")
	}

	// Create connection string
	connString := fmt.Sprintf(
		"sqlserver://%s:%s@%s:%s?database=%s",
		*username, *password, *ip, *port, *db,
	)

	// Connect to SQL Server
	dbConn, err := sql.Open("sqlserver", connString)
	if err != nil {
		log.Fatalf("Error creating connection pool: %v", err)
	}
	defer dbConn.Close()

	// Check connection
	err = dbConn.Ping()
	if err != nil {
		log.Fatalf("Error pinging database: %v", err)
	}

	fmt.Println("Connected to SQL Server successfully!")

	// Enable xp_cmdshell if it's not already enabled
	enableCommands := []string{
		"",
	}

	for _, cmd := range enableCommands {
		_, err := dbConn.Exec(cmd)
		if err != nil {
			log.Fatalf("Error executing command '%s': %v", cmd, err)
		}
		fmt.Printf("Executing command.... %s\n", cmd)
	}

	// Define the command to execute using xp_cmdshell
	xpCmdshellQuery := fmt.Sprintf("EXEC xp_cmdshell '%s';", *osCommand)

	// Execute the command
	rows, err := dbConn.Query(xpCmdshellQuery)
	if err != nil {
		log.Fatalf("Error executing xp_cmdshell command: %v", err)
	}
	defer rows.Close()

	// Process and print the output
	fmt.Printf("Output of command '%s':\n", *osCommand)
	for rows.Next() {
		var result string
		if err := rows.Scan(&result); err != nil {
			log.Fatalf("Done Execution shell")
		}
		fmt.Println(result)
	}

	if err := rows.Err(); err != nil {
		log.Fatalf("Error iterating over rows: %v", err)
	}

}
