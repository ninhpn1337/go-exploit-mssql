package main

import (
	"database/sql"
	"flag"
	"fmt"
	"log"

	_ "github.com/denisenkom/go-mssqldb"
)

func main() {
	// Khai báo các biến để lưu trữ tham số dòng lệnh
	username := flag.String("username", "", "SQL Server username")
	password := flag.String("password", "", "SQL Server password")
	ip := flag.String("ip", "127.0.0.1", "SQL Server IP address")
	port := flag.String("port", "1433", "SQL Server port")
	db := flag.String("db", "", "SQL Server database name")

	// Phân tích tham số dòng lệnh
	flag.Parse()

	// Kiểm tra tính hợp lệ của các tham số
	if *username == "" || *password == "" || *db == "" {
		log.Fatal("Username, password, and database name must be provided")
	}

	// Tạo chuỗi kết nối
	connString := fmt.Sprintf(
		"sqlserver://%s:%s@%s:%s?database=%s",
		*username, *password, *ip, *port, *db,
	)

	// Kết nối tới MSSQL
	dbConn, err := sql.Open("sqlserver", connString)
	if err != nil {
		log.Fatalf("Error creating connection pool: %v", err)
	}
	defer dbConn.Close()

	// Kiểm tra kết nối
	err = dbConn.Ping()
	if err != nil {
		log.Fatalf("Error pinging database: %v", err)
	}

	fmt.Println("Connected to MSSQL database successfully!")

	// Danh sách các câu lệnh SQL cần thực thi
	queries := []string{
		"EXEC sp_configure 'show advanced options', 1; RECONFIGURE;",
		"EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;",
	}

	// Thực thi các câu lệnh SQL
	for i, query := range queries {
		fmt.Printf("Executing query.....")
		rows, err := dbConn.Query(query)
		if err != nil {
			log.Fatalf("Error executing query", i+1, err)
		}
		defer rows.Close()

		// Xử lý kết quả truy vấn
		for rows.Next() {
			// Thay đổi các biến để phù hợp với cấu trúc bảng của bạn
			var column1 string
			var column2 int
			if err := rows.Scan(&column1, &column2); err != nil {
				log.Fatalf("Error scanning row in query", i+1, err)
			}
			fmt.Printf("Row from query", i+1, column1, column2)
		}

		if err := rows.Err(); err != nil {
			log.Fatalf("Error iterating over rows in query", i+1, err)
		}
	}
}
